### Support Vector Machine
library('e1071')
?e1071
?`e1071-deprecated`
## Correlation heat
library(seaborn)
## Correlation heat
install.packages("seaborn")
?write.csv
write.csv(iris,file="iris.csv")
getwd()
print("hello world")
iris
?iris3
# Load the necessary libraries
library(ggplot2)
library(gridExtra)
# Load the Iris dataset
data(iris)
# Create individual histograms
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Sepal Length") +
xlab("Sepal Length") +
ylab("Frequency")
p2 <- ggplot(iris, aes(x = Sepal.Width)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Sepal Width") +
xlab("Sepal Width") +
ylab("Frequency")
p3 <- ggplot(iris, aes(x = Petal.Length)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Petal Length") +
xlab("Petal Length") +
ylab("Frequency")
p4 <- ggplot(iris, aes(x = Petal.Width)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Petal Width") +
xlab("Petal Width") +
ylab("Frequency")
# Combine the plots into one figure
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "Purple") +
ggtitle("Sepal Length") +
xlab("Sepal Length") +
ylab("Frequency")
# Combine the plots into one figure
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Load the necessary libraries
library(ggplot2)
library(gridExtra)
# Load the Iris dataset
data(iris)
# Create individual histograms
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Sepal Length") +
xlab("Sepal Length") +
ylab("Frequency")
p2 <- ggplot(iris, aes(x = Sepal.Width)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Sepal Width") +
xlab("Sepal Width") +
ylab("Frequency")
p3 <- ggplot(iris, aes(x = Petal.Length)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Petal Length") +
xlab("Petal Length") +
ylab("Frequency")
p4 <- ggplot(iris, aes(x = Petal.Width)) +
geom_histogram(binwidth = 0.3, color = "black", fill = "blue") +
ggtitle("Petal Width") +
xlab("Petal Width") +
ylab("Frequency")
# Combine the plots into one figure
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
?iris
1+2
1+2
1+2*3
v <- c(1,2,4,8)
v
mean(v)
plot(v)
plot(v, type = "l")
hist(v)
library(data.table)
data_orig <- fread(file.choose())
data_orig <- fread(file.choose())
summary(data_orig)
getwd()
dir()
v <- c(1,2,4,8)
v
mean(v)
plot(v, type = "l")
hist(v)
library(data.table)
data_orig <- fread(file.choose())
mean(v)
nrow(data_orig)
row.names(data_orig)
data_orig <- fread(file.choose(), row.names = 1)
?fread
data_orig <- read.csv(file.choose(), row.names=1, na.strings = "")
summary(data_orig)
nrow(data_orig)
row.names(data_orig)
ncol(data_orig)
names(data_orig)
head(data_orig,10
head(data_orig,10)
head(data_orig,10)
data_orig$Population
hist(data_orig$Population)
hist(data_orig$Population, title = "Histogram of population in Data_orig")
?hist
hist(data_orig$Population, main = paste("Histogram of population in Data_orig"))
hist(data_orig$Population, main = paste("Histogram of population in Data_orig"),
xlab = "Population Count")
hist(data_orig$Area)
plot(data_orig$Population, data_orig$Area)
?plot
plot(data_orig$BirthRatePer1000, data_orig$LifeExpectancyAtBirth)
plot(data_orig$Area, data_orig$BirthRatePer1000)
plot(data_orig$Area, data_orig$LifeExpectancyAtBirth)
plot(data_orig$BirthRatePer1000, data_orig$LifeExpectancyAtBirth)
data_orig$Obesity
data <- na.omit(data_orig)
nrow(data)
data_numeric <- data[,names(data) != "Location"]
data_location <- data$Location
cor(data_numeric)
plot(data$BirthRatePer1000, data$MedianAge)
africa <- subset(data_numeric,grepl("Africa", data_location))
?grepl
result <- prcomp(africa, scale=T)
biplot(result)
View(data_orig)
summary(result)
round(result$rotation,3)
for (a in names(africa)) {
dev.new()
sorted <- africa[order(africa[,a], decreasing = T),]
values <- sorted[,a]
names <- row.names(sorted)
barplot(values,names.arg=names, las=2, main=a, cex.names=0.5)
}
library(dplyr)
library("dplyr")
library("dyplr")
library("dplyr")
install.packages(dplyr)
install.packages("dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
?filter
segmentAll <- fread(file.choose(), header = TRUE, stringsAsFactors = FALSE)
library(tidyverse)
install.packages("tidyverse")
library(data.table)
segmentAll <- fread(file.choose(), header = TRUE, stringsAsFactors = FALSE)
View(segmentAll)
asms <- c("nh232", "cw02", "nh236", "nh273", "nh286")
colnames(segmentAll) <- c("SegmentId","SegmentLen", "StartChrom",
"Offset", "SegRank",asms)
matrix <- segmentAll[,colnames(segmentAll) %in% assemb]
matrix <- segmentAll[,colnames(segmentAll) %in% asms]
matrix[matrix<0] <- 0
matrix[matrix>1] <- 1
nrwo(segmentAll[, asms])
nrow(segmentAll[, asms])
asms <- c("nh232", "cw02", "nh236", "nh273", "nh286")
colnames(segmentAll) <- c("SegmentId","SegmentLen", "StartChrom",
"Offset", "SegRank",asms)
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, asms] <- lapply(segmentAll[, asms], function(x) ifelse(x==1, 1, 0))
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, asms] <- lapply(segmentAll[, asms], function(x) ifelse(x==1, 1, 0))
View(segmentAll)
asms <- c("nh232", "cw02", "nh236", "nh273", "nh286")
colnames(segmentAll) <- c("SegmentId","SegmentLen", "StartChrom",
"Offset", "SegRank",asms)
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, asms] <- lapply(segmentAll[, asms], function(x) ifelse(x==1, 1, 0))
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, ..asms] <- lapply(segmentAll[, asms], function(x) ifelse(x==1, 1, 0))
colnames(segmentAll)
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, 6:10] <- lapply(segmentAll[, asms], function(x) ifelse(x==1, 1, 0))
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, 6:10] <- lapply(segmentAll[, 6:10], function(x) ifelse(x==1, 1, 0))
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, 6:10] <- lapply(segmentAll[, 6:10], function(x) ifelse(x>0, 1, 0))
View(segmentAll)
E
segmentAll <- fread(file.choose(), header = TRUE, stringsAsFactors = FALSE)
segmentAll <- as.data.frame(segmentAll)
asms <- c("nh232", "cw02", "nh236", "nh273", "nh286")
summary(segmentAll[,asms])
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, asms] <- lapply(segmentAll[, asms], function(x) ifelse(x>0, 1, 0))
segmentAll$total <- rowSums(segmentAll[,asms])
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
accession_numbers <- colnames(segmentAll)[asms]
paste(accessions_numbers == 1), collpase = ","
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
accession_numbers <- colnames(segmentAll)[asms]
paste(accessions_numbers == 1), collpase = ",")
# calculate number of accessions per segment then label what accessions are present
segmentAll$total <- rowSums(segmentAll[,asms])
accession_numbers <- colnames(segmentAll)[asms], paste(accessions_numbers == 1), collpase = ",")
accession_numbers <- colnames(segmentAll)[asms] paste(accessions_numbers == 1), collpase = ",")
paste(accessions_numbers == 1), collpase = ",")
paste(accessions_numbers[x==1], collpase = ",")
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
accession_numbers <- colnames(segmentAll)[asms]
paste(accessions_numbers[x==1], collpase = ",")
})
segmentAll$total <- rowSums(segmentAll[,asms])
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
accession_numbers <- colnames(segmentAll)[asms]
paste(accession_numbers[x == 1], collapase = ",")
})
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
paste(asms[x == 1], collapase = ",")
})
?gather
?gather
gather()
library(tidyverse)
library(data.table)
?gather
?setdiff
paste(asms[x == 1])
segmentAll$accession <- apply(segmentAll[,asms], 1, function(x) {
paste(asms[x == 1])
})
library(dplyr)
segmentAll <- segmentAll %>% rowwise() %>%
mutate(accession = paste(asms[which(c_across(all_of(asms))== 1)], collapse = ",")) %>%
ungroup()
?commandArgs
getwd()
nrow(segmentAll)
nrow(segmentAll[,segmentAll$total == 5])
View(segmentAll)
nrow(segmentAll$total == 5])
nrow(segmentAll$total == 5)
nrow(segmentAll[segmentAll$total == 5, ])
nrow(segmentAll[segmentAll$total == 1, ])
nrow(segmentAll[segmentAll$total == c(2,3,4), ])
nrow(segmentAll[segmentAll$total == 2 OR 3 OR 4, ])
nrow(segmentAll[segmentAll$total == 2, ])
nrow(segmentAll[segmentAll$total == 3, ])
nrow(segmentAll[segmentAll$total == 4, ])
nrow(segmentAll[segmentAll$total == 0, ])
nrow(segmentAll[segmentAll$srank > 0, ])
View(segmentAll)
nrow(segmentAll[segmentAll$SegRank > 0, ])
nrow(segmentAll[segmentAll$SegRank == 0, ])
sum(segmentAll[segmentAll$total == 5, ]$SegmentLen)
sum(segmentAll[segmentAll$total == 1, ]$SegmentLen)
sum(segmentAll[segmentAll$total == 4, ]$SegmentLen)
sum(segmentAll[segmentAll$total == 3, ]$SegmentLen)
sum(segmentAll[segmentAll$total == 2, ]$SegmentLen)
sum(segmentAll[segmentAll$total == 0, ]$SegmentLen)
sum(segmentAll$SegmentLen)
181413834 + 27523528 + 45609861 + 83916099 + 8732054
181413834 + 27523528 + 45609861 + 83916099 + 8732054 + 240639211
sum(segmentAll$cw02)
setwd("/Users/jongpaduhilao/Desktop/LAB Files/Initial_Pangenome_analysis/Trial_3")
dir
dir()
ls
dir())
dir()
library(tidyverse)
datcore  <- read.table("remap/nip_coverage.tsv",
header=TRUE,
stringsAsFactors = FALSE)
assemb  <- c("nh232","cw02", "nh236", "nh286", "nh273")
colnames(datcore) <- c("nodeid","nodelen","chromo","pos","rrank",assemb)
View(datcore)
##if has coverage put 1 in the matrix
datmat <- datcore[,colnames(datcore) %in% assemb]
View(datmat)
datmat[datmat<0] <- 0
datmat[datmat>0] <- 1
getwd()
##if has coverage put 1 in the matrix
datmat <- datcore[,colnames(datcore) %in% assemb]
datmat[datmat<0] <- 0
datmat[datmat>0] <- 1
dir()
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE,stringsAsFactors = FALSE)
View(datlen)
datid <- data.frame(rankid=seq(0,length(assemb)-1),
breed=assemb,stringsAsFactors = FALSE)
View(datid)
colnames(datlen) <- c("nodeid","conlen","chromo","pos","rrank")
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
View(datid)
View(datlen)
#add colour for nodes which already
#defined from the rank
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE)
View(datlen)
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE, stringsAsFactors = FALSE)
datlen$V1 <- as.numeric(datlen$V1)
datlen <- datlen[order(datlen$V1),]
#add colour for nodes which already
#defined from the rank
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE, stringsAsFactors = FALSE)
datlen$V1 <- as.factor(datlen$V1)
datlen <- datlen[order(datlen$V1),]
colnames(datlen) <- c("nodeid","conlen","chromo","pos","rrank")
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
View(datmat)
View(datmat)
View(datlen)
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE, stringsAsFactors = FALSE)
datlen$V1 <- as.factor(datlen$V1)
datlen <- datlen[order(datlen$V1),]
colnames(datlen) <- c("nodeid","conlen","chromo","pos","rrank")
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
View(datmat)
#add colour for nodes which already
#defined from the rank
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE, stringsAsFactors = FALSE)
View(datlen)
datlen <- datlen[order(datlen$V1),]
row.names(datlen) <- NULL
colnames(datlen) <- c("nodeid","conlen","chromo","pos","rrank")
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
View(datmat)
##if has coverage put 1 in the matrix
datmat <- datcore[,colnames(datcore) %in% assemb]
datmat[datmat<0] <- 0
datmat[datmat>0] <- 1
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
View(datmat)
##if has coverage put 1 in the matrix
datmat <- datcore[,colnames(datcore) %in% assemb]
View(datmat)
colnames(datcore) <- c("nodeid","nodelen","chromo","pos","rrank",assemb)
datmat <- datcore[,colnames(datcore) %in% assemb]
datmat[datmat<0] <- 0
datmat[datmat>0] <- 1
View(datcore)
#add colour for nodes which already
#defined from the rank
datlen <- read.table(paste0("graph/nip_graph_len.tsv"),
header=FALSE, stringsAsFactors = FALSE)
datlen <- datlen[order(datlen$V1),]
row.names(datlen) <- NULL
colnames(datlen) <- c("nodeid","conlen","chromo","pos","rrank")
datlen[1,"rrank"]
datlen[2,"rrank"]
datlen[1000,"rrank"]
datlen[270000,"rrank"]
datlen[270081,"rrank"]
datmat[188983,]
datlen[188983,]
datid[datid$rankid,]
datid[datid$rankid==2,]
datid[datid$rankid==2,"breed"]
datmat[2,]
datmat[2,"nh232"] <- 0
datmat[2,]
datmat[2,"nh232"] <- 1
datmat[2,]
for (i in seq(1,nrow(datlen))){
rankanims <- datlen[i,"rrank"]
brid <- datid[datid$rankid==rankanims,"breed"]
datmat[i,brid] <- 1
}
datmat[188983,]
datmat[188983:188990,]
datmat2 <- datmat
datlab <- datmat
colnode <- rep("0",nrow(datlab))
for (i in seq(1,nrow(datmat2))){
labcol <- colnames(datmat2[i,which(datmat2[i,]==1),drop=FALSE]) %>%
paste0(collapse = ",")
colnode[i] <- labcol
colnode <- rep("0",nrow(datlab))
for (i in seq(1,nrow(datmat2))){
labcol <- colnames(datmat2[i,which(datmat2[i,]==1),drop=FALSE]) %>%
paste0(collapse = ",")
colnode[i] <- labcol
}
colnode <- rep("0",nrow(datlab))
for (i in seq(1,nrow(datmat2))){
labcol <- colnames(datmat2[i,which(datmat2[i,]==1),drop=FALSE]) %>%
paste0(collapse = ",")
colnode[i] <- labcol
}
#output file
datout <- data.frame(nodeid=datcore$nodeid,colnode=colnode)
View(datout)
setwd("/Users/jongpaduhilao/Desktop/LAB Files/Initial_Pangenome_analysis/Trial_4")
# import the combined coverage and label as segmentALL
segmentAll <- fread(file.choose(), header = TRUE, stringsAsFactors = FALSE)
library(tidyverse)
library(data.table)
library(dplyr)
# import the combined coverage and label as segmentALL
segmentAll <- fread(file.choose(), header = TRUE, stringsAsFactors = FALSE)
segmentAll <- as.data.frame(segmentAll)
asms <- c("IRGSP","nh232", "cw02", "nh236", "nh286", "nh273")
asms <- c("IRGSP","nh232", "cw02", "nh236", "nh286", "nh273")
rankid <- data.frame(rankid=seq(0,length(asms)-1),
accessions=assemb,stringsAsFactors = FALSE)
rankid <- data.frame(rankid=seq(0,length(asms)-1),
accessions=asms,stringsAsFactors = FALSE)
View(rankid)
# Based on coverage only
# evaluate whether values under each accession number is 0 or 1 and assign a value
segmentAll[, asms] <- lapply(segmentAll[, asms], function(x) ifelse(x>0, 1, 0))
View(segmentAll)
# Based on rank
# update the matrix such that an assembly whose rank is equal to the node's rank is certainly tagged as 1
segmentAll_updated <- segmentAll
segmentAll[1,"SegRank"]
segmentAll[270000,"SegRank"]
asms_rank <- data.frame(rankid=seq(0,length(asms)-1),
accessions=asms,stringsAsFactors = FALSE)
segmentAll[asms_rank$rankid==1,"accessions"]
asms_rank[asms_rank$rankid==1, "accessions"]
segmentAll_updated[i, "nh232"]
segmentAll_updated[1, "nh232"]
segmentAll_updated[2, "cw02"]
segmentAll_updated <- segmentAll
for (i in seq(1,nrow(segmentAll_updated))){
rank <- segmentAll[i,"SegRank"]
accession_id <- asms_rank[asms_rank$rankid==rank,"accessions"]
segmentAll_updated[i,accession_id] <- 1
}
View(segmentAll_updated)
segmentAll_2 <- segmentAll
for (i in seq(1,nrow(segmentAll))){
rank <- segmentAll[i,"SegRank"]
accession_id <- asms_rank[asms_rank$rankid==rank,"accessions"]
segmentAll_2[i,accession_id] <- 1
}
segmentAll_2$total <- rowSums(segmentAll_2[,asms])
matrix_only <- segmentAll_2 # to save the matrix only
View(matrix_only)
# put labels to each of the segments
segmentAll_2 <- segmentAll_2 %>% rowwise() %>%
mutate(accessions = paste(asms[which(c_across(all_of(asms))== 1)], collapse = ",")) %>%
ungroup()
View(segmentAll_updated)
View(segmentAll_updated)
View(segmentAll_updated)
View(segmentAll_2)
names_only <- data.frame(SegmentId=segmentAll_2$SegmentId, Accessions=segmentAll_2$accessions)
View(names_only)
getwd()
# write to csv
##output files:
### all tsv
write.table(segmentAll_2,file="02_Presence_Absence_ALL.tsv")
# write to csv
##output files:
### all tsv
write.table(segmentAll_2,file="02_Presence_Absence_ALL.tsv", quote = FALSE,row.names = FALSE, col.names = FALSE)
# write to csv
##output files:
### all tsv
write.table(segmentAll_2,file="02_Presence_Absence_ALL.tsv", quote = FALSE,row.names = FALSE)
View(asms_rank)
class(asms)
View(segmentAll)
asms <- c("IRGSP","nh232", "cw02", "nh236", "nh286", "nh273","00")
# Identify the columns starting from "SegRank" to the end
start_idx <- which(colnames(segmentAll) == "SegRank") + 1
asms <- colnames(segmentAll)[start_idx:length(colnames(segmentAll))]
View(asms_rank)
class(asms)
asms_rank <- data.frame(rankid=seq(0,length(asms)-1),
accessions=asms,stringsAsFactors = FALSE)
View(asms_rank)
