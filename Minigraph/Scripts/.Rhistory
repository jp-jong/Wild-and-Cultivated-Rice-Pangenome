upset(binary_matrix,
sets = names(binary_matrix),
order.by = "freq",
main.bar.color = "dodgerblue4",
sets.bar.color = "dodgerblue2",
text.scale = c(2, 1.5, 1, 1.5, 2, 2))
# Create a binary matrix for the UpSet plot
binary_matrix <- df_long %>%
group_by(type) %>%
count(assemblies) %>%
spread(assemblies, n, fill = 0) %>%
ungroup() %>%
select(-type)
# Convert to binary format
binary_matrix[binary_matrix > 0] <- 1
upset(binary_matrix,
sets = names(binary_matrix),
order.by = "freq",
main.bar.color = "dodgerblue4",
sets.bar.color = "dodgerblue2",
text.scale = c(2, 1.5, 1, 1.5, 2, 2))
all_varieties
all_varieties <- unique(c(unlist(processed_data$refAsms), unlist(processed_data$altAsms)))
sv_types <- unique(processed_data$type)
all_varieties
View(processed_data)
View(df_long)
View(df)
View(data)
View(binary_matrix)
View(alt_intersection)
View(ref_intersection)
View(processed_data)
View(df)
View(alt_intersection)
# Create a binary matrix for the UpSet plot
binary_matrix <- df_long %>%
group_by(type) %>%
count(assemblies) %>%
spread(assemblies, n, fill = 0) %>%
ungroup() %>%
select(-type)
View(binary_matrix)
View(binary_matrix)
library(tidyverse)
library(UpSetR)
# Read the data
data <- read.table("test_05_biallelic_asm_paths.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Function to process assemblies
process_assemblies <- function(asms) {
if (asms == "") return(character(0))
strsplit(asms, ",")[[1]]
}
# Process the data
processed_data <- data %>%
mutate(
ref_assemblies = map(refAsms, process_assemblies),
alt_assemblies = map(altAsms, process_assemblies)
)
# Function to create intersection list
create_intersection_list <- function(data, sv_type, allele_type) {
filtered_data <- data %>% filter(type == sv_type)
assemblies <- unique(unlist(filtered_data[[paste0(allele_type, "_assemblies")]]))
intersection_list <- list()
for (assembly in assemblies) {
variants <- filtered_data %>%
filter(map_lgl(!!sym(paste0(allele_type, "_assemblies")), ~assembly %in% .)) %>%
mutate(variant_id = paste(chr, start, end, sep = "_")) %>%
pull(variant_id)
intersection_list[[assembly]] <- variants
}
return(intersection_list)
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = length(intersection_list),
nintersects = NA,
order.by = "freq",
set_size.show = FALSE,
main.bar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1))
title(paste(sv_type, "-", allele_type, "Alleles"), line = -1)
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Set up a 1x2 plotting area
par(mfrow = c(1, 2))
# Plot reference alleles
plot_intersection(ref_intersection, sv_type, "Reference")
# Plot alternative alleles
plot_intersection(alt_intersection, sv_type, "Alternative")
# Reset the plotting area
par(mfrow = c(1, 1))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
library(tidyverse)
library(UpSetR)
# Read the data
data <- read.table("test_05_biallelic_asm_paths.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Function to process assemblies
process_assemblies <- function(asms) {
if (asms == "") return(character(0))
strsplit(asms, ",")[[1]]
}
# Process the data
processed_data <- data %>%
mutate(
ref_assemblies = map(refAsms, process_assemblies),
alt_assemblies = map(altAsms, process_assemblies)
)
# Function to create intersection list
create_intersection_list <- function(data, sv_type, allele_type) {
filtered_data <- data %>% filter(type == sv_type)
assemblies <- unique(unlist(filtered_data[[paste0(allele_type, "_assemblies")]]))
intersection_list <- list()
for (assembly in assemblies) {
variants <- filtered_data %>%
filter(map_lgl(!!sym(paste0(allele_type, "_assemblies")), ~assembly %in% .)) %>%
mutate(variant_id = paste(chr, start, end, sep = "_")) %>%
pull(variant_id)
intersection_list[[assembly]] <- variants
}
return(intersection_list)
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = length(intersection_list),
nintersects = NA,
order.by = "freq",
set_size.show = FALSE,
mainbar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1))
title(paste(sv_type, "-", allele_type, "Alleles"), line = -1)
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Set up a 1x2 plotting area
par(mfrow = c(1, 2))
# Plot reference alleles
plot_intersection(ref_intersection, sv_type, "Reference")
# Plot alternative alleles
plot_intersection(alt_intersection, sv_type, "Alternative")
# Reset the plotting area
par(mfrow = c(1, 1))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
# Get unique SV types
sv_types <- unique(processed
library(tidyverse)
library(UpSetR)
library(gridExtra)
# Read the data
data <- read.table("test_05_biallelic_asm_paths.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Function to process assemblies
process_assemblies <- function(asms) {
if (asms == "") return(character(0))
strsplit(asms, ",")[[1]]
}
# Process the data
processed_data <- data %>%
mutate(
ref_assemblies = map(refAsms, process_assemblies),
alt_assemblies = map(altAsms, process_assemblies)
)
# Function to create intersection list
create_intersection_list <- function(data, sv_type, allele_type) {
filtered_data <- data %>% filter(type == sv_type)
assemblies <- unique(unlist(filtered_data[[paste0(allele_type, "_assemblies")]]))
intersection_list <- list()
for (assembly in assemblies) {
variants <- filtered_data %>%
filter(map_lgl(!!sym(paste0(allele_type, "_assemblies")), ~assembly %in% .)) %>%
mutate(variant_id = paste(chr, start, end, sep = "_")) %>%
pull(variant_id)
intersection_list[[assembly]] <- variants
}
return(intersection_list)
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = length(intersection_list),
nintersects = NA,
order.by = "freq",
set_size.show = FALSE,
mainbar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1),
main = paste(sv_type, "-", allele_type, "Alleles"))
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Create the plots
ref_plot <- plot_intersection(ref_intersection, sv_type, "Reference")
alt_plot <- plot_intersection(alt_intersection, sv_type, "Alternative")
# Arrange the plots side by side
grid.arrange(ref_plot, alt_plot, ncol = 2,
top = textGrob(paste("Intersection plots for", sv_type),
gp = gpar(fontsize = 16, font = 2)))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = 7,
nintersects = NA,
order.by = "freq",
set_size.show = FALSE,
mainbar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1),
main = paste(sv_type, "-", allele_type, "Alleles"))
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Create the plots
ref_plot <- plot_intersection(ref_intersection, sv_type, "Reference")
alt_plot <- plot_intersection(alt_intersection, sv_type, "Alternative")
# Arrange the plots side by side
grid.arrange(ref_plot, alt_plot, ncol = 2,
top = textGrob(paste("Intersection plots for", sv_type),
gp = gpar(fontsize = 16, font = 2)))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = 6,
nintersects = NA,
order.by = "freq",
set_size.show = FALSE,
mainbar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1),
main = paste(sv_type, "-", allele_type, "Alleles"))
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Create the plots
ref_plot <- plot_intersection(ref_intersection, sv_type, "Reference")
alt_plot <- plot_intersection(alt_intersection, sv_type, "Alternative")
# Arrange the plots side by side
grid.arrange(ref_plot, alt_plot, ncol = 2,
top = textGrob(paste("Intersection plots for", sv_type),
gp = gpar(fontsize = 16, font = 2)))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
# Function to plot intersection
plot_intersection <- function(intersection_list, sv_type, allele_type) {
upset(fromList(intersection_list),
nsets = 6,
nintersects = 40,
order.by = "freq",
set_size.show = FALSE,
mainbar.y.label = "Number of Variants",
sets.x.label = "Number of Variants per Assembly",
text.scale = c(1.2, 1.2, 1, 1, 1.2, 1),
main = paste(sv_type, "-", allele_type, "Alleles"))
}
# Get unique SV types
sv_types <- unique(processed_data$type)
# Set up the plot
theme_set(theme_bw(base_size = 9) +
theme(panel.grid = element_blank()))
# Create plots for each SV type
for (sv_type in sv_types) {
ref_intersection <- create_intersection_list(processed_data, sv_type, "ref")
alt_intersection <- create_intersection_list(processed_data, sv_type, "alt")
# Create the plots
ref_plot <- plot_intersection(ref_intersection, sv_type, "Reference")
alt_plot <- plot_intersection(alt_intersection, sv_type, "Alternative")
# Arrange the plots side by side
grid.arrange(ref_plot, alt_plot, ncol = 2,
top = textGrob(paste("Intersection plots for", sv_type),
gp = gpar(fontsize = 16, font = 2)))
# Pause to allow viewing of the plot
cat("Created plots for", sv_type, ". Press [Enter] to continue to the next SV type...\n")
readline(prompt = "")
}
View(ref_intersection)
library(UpSetR)
library(tidyverse)
# Read the file
data <- read.table("test_05_biallelic_asm_paths.tsv", header = TRUE, stringsAsFactors = FALSE)
library(UpSetR)
library(tidyverse)
# Read the file
data <- read.table("test_05_biallelic_asm_paths.tsv",sep = "\t", header = TRUE, stringsAsFactors = FALSE)
View(data)
# Process the data
processed_data <- data %>%
mutate(
ref_varieties = map(refAsms, ~ strsplit(.x, ",")[[1]]),
alt_varieties = map(altAsms, ~ strsplit(.x, ",")[[1]])
) %>%
select(sv_type, ref_len, alt_len, ref_varieties, alt_varieties)
# Process the data
processed_data <- data %>%
mutate(
ref_varieties = map(refAsms, ~ strsplit(.x, ",")[[1]]),
alt_varieties = map(altAsms, ~ strsplit(.x, ",")[[1]])
) %>%
select(type, refLen, altLen, ref_varieties, alt_varieties)
# Process the data
processed_data <- data %>%
mutate(
ref_varieties = map(refAsms, ~ strsplit(.x, ",")[[1]]),
alt_varieties = map(altAsms, ~ strsplit(.x, ",")[[1]])
) %>%
select(type, refLen, nonrefLen, ref_varieties, alt_varieties)
# Get unique varieties and SV types
all_varieties <- unique(c(unlist(processed_data$ref_varieties), unlist(processed_data$alt_varieties)))
sv_types <- unique(processed_data$type)
# Create a binary matrix for each SV type and path
create_binary_matrix <- function(data, sv_type, path) {
sv_data <- data %>% filter(sv_type == !!sv_type)
matrix <- matrix(0, nrow = nrow(sv_data), ncol = length(all_varieties))
colnames(matrix) <- all_varieties
for (i in 1:nrow(sv_data)) {
if (path == "ref") {
matrix[i, sv_data$ref_varieties[[i]]] <- 1
} else {
matrix[i, sv_data$alt_varieties[[i]]] <- 1
}
}
as.data.frame(matrix)
}
dir()
# Create and save UpSet plots for each SV type and path
for (sv in sv_types) {
for (path in c("ref", "alt")) {
binary_matrix <- create_binary_matrix(processed_data, sv, path)
pdf(paste0("upset_plot_", sv, "_", path, ".pdf"), width = 12, height = 8)
tryCatch({
print(upset(binary_matrix,
nsets = length(all_varieties),
nintersects = 30,
order.by = "freq",
mainbar.y.label = paste("Shared", path, "path Intersections"),
sets.x.label = paste(sv, "per Variety -", path, "path"),
text.scale = 1.5,
point.size = 3,
line.size = 1,
main.bar.color = ifelse(path == "ref", "blue", "red"),
sets.bar.color = ifelse(path == "ref", "lightblue", "pink"),
shade.color = "gray",
matrix.color = "black",
keep.order = TRUE))
}, error = function(e) {
cat("Error in creating plot for", sv, path, "path:", conditionMessage(e), "\n")
})
dev.off()
cat("Created plot for", sv, path, "path\n")
}
}
View(binary_matrix)
IRGSPsvref <- data %>% filter(refAsms ~ "IRGSP")
IRGSPsvref <- data %>% filter(refAsms == "IRGSP")
IRGSPsvref <- data %>% filter(str_detect(refAsms, "IRGSP"))
filter_sv_asm <- function(data, sv_type, asm) {
sv_data <- data %>% filter(type == sv_type)
sv_data <- sv_data %>% filter(str_detect(refAsms,asm))
}
IRGSPred <- filter_sv_asm(data,"Insertion", "IRGSP")
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", "refAsms")
# data
# on ref
filter_sv_asm <- function(data, sv_type, asm,allele) {
sv_data <- data %>% filter(type == sv_type)
sv_data <- sv_data %>% filter(str_detect(allele,asm))
}
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", "refAsms")
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", "refAsm")
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", refAsms)
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", refAsm)
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", refAsms)
# data
# on ref
filter_sv_asm <- function(data, sv_type, asm,allele) {
sv_data <- data %>% filter(type == sv_type)
if (allele == "ref") {
sv_data <- sv_data %>% filter(str_detect(refAsms,asm))
}
}
if (allele == "ref") {
sv_data <- sv_data %>% filter(str_detect(refAsms,asm))
else {
# data
# on ref
filter_sv_asm <- function(data, sv_type, asm,allele) {
sv_data <- data %>% filter(type == sv_type)
if (allele == "ref") {
sv_data <- sv_data %>% filter(str_detect(refAsms,asm))
else {
# data
# on ref
filter_sv_asm <- function(data, sv_type, asm,allele) {
sv_data <- data %>% filter(type == sv_type)
if (allele == "ref") {
sv_data <- sv_data %>% filter(str_detect(refAsms,asm))
} else {
sv_data <- sv_data %>% filter(str_detect(altAsms,asm))
}
return(sv_data)
}
IRGSPred <- filter_sv_asm(data,"Insertion","IRGSP", "ref")
# Insertion
cw02Insref <- filter_sv_asm((data,"Insertion","cw02","ref"))
# Insertion
cw02Insref <- filter_sv_asm(data,"Insertion","cw02","ref")
nh232Insref <- filter_sv_asm(data,"Insertion","nh232", "ref")
nh236Insref <- filter_sv_asm(data,"Insertion","nh236", "ref")
nh273Insref <- filter_sv_asm(data,"Insertion","nh273", "ref")
nh286Insref <- filter_sv_asm(data,"Insertion","nh286", "ref")
IRGSPInsref <- filter_sv_asm(data,"Insertion","IRGSP", "ref")
View(cw02Insref)
listInputX <- list(cw02=cw02Insref$refPath, nh232=nh232Insref$refPath,
nh236=nh236Insref$refPath,nh273=nh273Insref$refPath,
nh286=nh286Insref$refPath,IRGSP=IRGSPInsref$refPath)
upset(fromList(listInputX), nsets=6, nintersects = 30, order.by = c("freq"),
set_size.show = FALSE)
# Insertion-alt
# Insertion-ref
cw02Insalt <- filter_sv_asm(data,"Insertion","cw02","alt")
nh232Insalt <- filter_sv_asm(data,"Insertion","nh232", "alt")
nh236Insalt <- filter_sv_asm(data,"Insertion","nh236", "alt")
nh273Insalt <- filter_sv_asm(data,"Insertion","nh273", "alt")
nh286Insalt <- filter_sv_asm(data,"Insertion","nh286", "alt")
IRGSPInsalt <- filter_sv_asm(data,"Insertion","IRGSP", "alt")
listInsAlt <- list(cw02=cw02Insalt$altPath, nh232=nh232Insalt$altPath,
nh236=nh236Insalt$altPath,nh273=nh273Insalt$altPath,
nh286=nh286Insalt$altPath,IRGSP=IRGSPInsalt$altPath)
upset(fromList(listInsAlt), nsets=6, nintersects = 30, order.by = c("freq"),
set_size.show = FALSE)
noassembInsAlt <- filter_sv_asm(data,"Insertion", " " , "alt")
noassembInsAlt <- filter_sv_asm(data,"Insertion", "" , "alt")
noassembInsAlt <- filter_sv_asm(data,"Insertion", " " , "alt")
noassembInsAlt <- filter_sv_asm(data,"Deletion", " " , "alt")
noassembInsAlt <- filter_sv_asm(data,"AltIns", " " , "alt")
noassembInsAlt <- filter_sv_asm(data,"AltDel", " " , "alt")
noassembInsAlt <- filter_sv_asm(data,"AltDel", NA , "alt")
upset(fromList(listInsAlt), nsets=6, nintersects = 40, order.by = c("freq"),
set_size.show = FALSE)
# Read the file
data <- read.table("test_05_biallelic_asm_paths.tsv",sep = "\t", header = TRUE, stringsAsFactors = FALSE,na.strings="")
naInsAlt <- data %>% filter(altAsms == NA)
View(naInsAlt)
naInsAlt <- data %>% filter(refAsms == NA)
View(data)
# Read the file
data <- read.table("test_05_biallelic_asm_paths.tsv",sep = "\t", header = TRUE, stringsAsFactors = FALSE,na.strings="")
naInsAlt <- data %>% filter(is.na(altAsms))
View(naInsAlt)
# Read the file
data <- read.table("test_05_biallelic_asm_paths.tsv",sep = "\t", header = TRUE, stringsAsFactors = FALSE,na.strings="")
noassembInsref <- filter_sv_asm(data,"Insertion","noassemb", "ref")
naInsAlt <-filter_sv_asm(data,"Insertion","noassemb", "alt")
listInsAlt <- list(cw02=cw02Insalt$altPath, nh232=nh232Insalt$altPath,
nh236=nh236Insalt$altPath,nh273=nh273Insalt$altPath,
nh286=nh286Insalt$altPath,IRGSP=IRGSPInsalt$altPath,
noassemb=naInsAlt$altPath)
upset(fromList(listInsAlt), nsets=7, nintersects = 40, order.by = c("freq"),
set_size.show = FALSE)
